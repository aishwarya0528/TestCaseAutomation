name: React Test CI
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    - name: Install dependencies
      run: |
        cd frontend
        npm install
        npm install --save-dev identity-obj-proxy @babel/preset-env @babel/preset-react
    - name: Update @testing-library/react
      run: |
        cd frontend
        npm install --save-dev @testing-library/react@latest
    - name: Create Jest config
      run: |
        cd frontend
        echo "module.exports = {
          testEnvironment: 'jsdom',
          setupFilesAfterEnv: ['@testing-library/jest-dom'],
          moduleNameMapper: {
            '\\\\.(css|less|scss|sass)$': 'identity-obj-proxy',
            '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$': '<rootDir>/__mocks__/fileMock.js'
          },
          transform: {
            '^.+\\\\.(js|jsx)$': 'babel-jest'
          },
          transformIgnorePatterns: [
            '/node_modules/',
            '^.+\\\\.module\\\\.(css|sass|scss)$'
          ]
        };" > jest.config.js
    - name: Create file mock
      run: |
        cd frontend
        mkdir -p __mocks__
        echo "module.exports = 'test-file-stub';" > __mocks__/fileMock.js
    - name: Update App.test.js
      run: |
        cd frontend
        echo "import React from 'react';
        import { render, screen } from '@testing-library/react';
        import App from './App';

        test('renders learn react link', () => {
          render(<App />);
          const linkElement = screen.getByText(/learn react/i);
          expect(linkElement).toBeInTheDocument();
        });" > App.test.js
    - name: Run all tests with Jest
      run: |
        cd frontend
        npx jest --config=jest.config.js
